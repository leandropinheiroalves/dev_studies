[Tipos Primitivos]
    int # numeros inteiros, ex: 7, -4, 0, 9875
    float # numeros reais ex: 4.5, 0.076, -15.223, 7.0
    bool # verdadeiro ou falso ex: True, False
    str # 'Olá', '7.5', '8', ''

[F String]
    print('A soma vale', s) # imprime a string e depois o valor da variavel s
    print(f'A soma vale {s}') # imprime a string com o valor da variavel s
    print('A soma vale {}'.format(s)) # imprime a string com o valor da variavel s
    print(f'A soma vale {s:20}') # imprime a string com o valor da variavel s em 20 caracteres
    print(f'A soma vale {s:>20}') # imprime a string com o valor da variavel s em 20 caracteres alinhado a direita
    print(f'A soma vale {s:<20}') # imprime a string com o valor da variavel s em 20 caracteres alinhado a esquerda
    print(f'A soma vale {s:^20}') # imprime a string com o valor da variavel s em 20 caracteres centralizado
    print(f'A soma vale {s:=^20}') # imprime a string com o valor da variavel s em 20 caracteres centralizado com = em volta

[Operadores Aritméticos]
    +   # Adição            ex: 5+2==7
    -   # Subtração         ex: 5-2==3
    *   # Multiplicação     ex: 5*2==10
    /   # Divisão           ex: 5/2==2.5
    **  # Exponenciação     ex: 5**2==25
    //  # Divisão Exata     ex: 5//2==2
    %   # Resto da Divisão  ex: 5%2==1

[Ordem de Precedência]
    ()              # 1°
    **              # 2°
    *, /, //, %     # 3°
    +, -            # 4°
    Ex:
    5+3*2 == 5+6 == 11
    3*5+4**2 == 3*5+16 == 15+16 == 31
    3*(5+4)**2 == 3*9**2 == 3*81 == 243

[Importar Módulos]
    - import math# importa o modulo math, fazendo com que eu possa utilizar a funcionalidades da biblioteca math no meu projeto
        # ao importar toda a biblioteca é necessário utilizar o nome dela para utilizar as funções ex: math.floor(7.5)
    - from math import floor # importa apenas a funçao floor do modulo math, permitindo utilizar apenas o comando floor e não os demais da biblioteca math
        # importando apenas uma função especifica não é necessário usar o nome da biblioteca ex: floor(7.5)

[Biblioteca math]
    - ceil # arredondamento pra cima
    - floor # arredondamento pra baixo
    - trunc # truncagem
    - pow # exponenciação
    - sqrt # raiz quadrada
    - factorial # fatorial
    - hypot # hipotenusa

[Manipulando Cadeia de Caracteres]
    - Fatiamento
        frase = 'Curso em Vídeo Python'
        frase[9] == 'V'
        frase[9:13] == 'Víde' # pega os caracteres da posição 9 até a posição 12, porque o intervalo é aberto no inicio e fechado no final
        frase[9:21:2] == 'VdoPto' # pega os caracteres da posição 9 até a 20 pulando de 2 em 2.
        frase[:5] == 'Curso' # sem o valor inicial a contagem começa do inicio até o 4necessário
        frase[15:] == 'Python' # sem o valor final a contagem vai até o final
        frase[9::3] == 'VePh' # sem o valor do meio, quer dizer que vai iniciar da posição 9 até o final pulando de 3 em 3.
    - Análise
        len(frase) == 21 # o len informa a quantidade de caracteres em uma string ou lista
        frase.count('o') == 3 # .count conta quantas vezes o 'o' aparece dentro da string frase
        frase.count('o', 0, 13) == 1 # igual a anterior porem já com fatiamento do inicio ate a posição 12
        frase.find('deo') == 11 # busca dentro da string frase a sequencia 'deo' e retorna  o numero da posicao inicial encontrada
        frase.find('Android') == -1 # quando a operação find não encontra nada ela retorna o valor -1
        'Curso' in frase == True # verifica se 'Curso' está dentro da string frase
    - Transformação
        frase.replace('Python', 'Android') # metodo que procura dentro da string por 'Python' e caso encontrado substitui por 'Android'
        frase.upper() # metodo que transforma todos os caracteres da string em maiusculas
        frase.lower() # metodo que transforma todos os caracteres da string em minusculas
        frase.capitalize() # metodo que tranforma todos os caracteres pra minusculo e a primeira pra maiusculo
        frase.title() # faz o mesmo que capitalize, com a diferença que deixa todas as letras iniciais das palavras em maiusculas
        frase.strip() # remove todos os espaços no inicio e no final da string
        frase.rstrip() # remove só os espaços do final
        frase.lstrip() # remove só os espaços do inicio
    - Divisão
        frase.split() # criar uma lista com os valores da string separados pelos espaços
    - Junção
        '-'.join(frase) # junta todos os valores de uma lista em uma string separando os valores pelo -

[Condições Simples e Compostas]
    - Condião Simples # só é utilizado o if
        nome = str(input('Qual é seu nome? '))
        if nome == 'Leandro':
            print('Que nome lindo  você tem!')
        print('Bom dia, {}'.format(nome))
    - Condição composta # o else é utilizado
        tempo = int(input('Quantos anos tem seu carro?'))
        if tempo <= 3:  # caso o tempo for menor ou igual a 3, todo o código indentado dentro do if será executado
            print('carro novo')
        else:  # caso o tempo for maior que 3, o código dentro do if será pulado e o código indentado dentro do else será executado
            print('carro velho')
        print('--FIM--')  # código fora da indentação será executado normalmente.
    - Condição simplificada
        tempo = int(input('Quantos anos tem seu carro?'))
        print('carro novo' if tempo <= 3 else 'carro velho')  # um jeito simplificado de fazer, no entanto não é o mais recomendável
        print('--FIM--')

[Cores no Terminal]
    - ANSI escape sequence
        print(\033[style;text;backmOlá Mundo)
        - códigos para style
            0 == None
            1 == Bold # Negrito
            2 == Underline # Sublinhado
            3 == Negative # Negativo
        - códigos para text # cores
            30 == Branco
            31 == Vermelho
            32 == Verde
            33 == Amarelo
            34 == Azul
            35 == Magenta
            36 == Ciano
            37 == Cinza
        - códigos back # background
            40 == Branco
            41 == Vermelho
            42 == Verde
            43 == Amarelo
            44 == Azul
            45 == Magenta
            46 == Ciano
            47 == Cinza

[Condições Aninhadas] # 3 possibilidades ou mais
    if condiçao1:
        bloco1
    elif condição2:
        bloco2
    elif condição3:
        bloco3
    else:
        bloco4

[Laços de Repetição]
    - for # utilizado quando é sabido o número de repetições a serem feitas
        for i in range(0, 3): #cria um laço de repetição que vai se repitir 3 vezes
            bloco a ser repetido
        bloco fora do compo do laço
    - while  # utilizando quando não é sabido o numero de repetições a serem feitas
        ex1:
        c = 1  # necessário criar a variavel de repetição fora do while
        while c < 0:  # enquanto essa condição for verdadeira o loop continuará
            print(c)
            c += 1  # necessário incrementar a váriavel para não ter um loop infinito
        ex2:
        n = 1
        while n != 0:
            n = int(input('Digite um valor: ')  # enquanto o valor 0 não for digitado, o loop ira continuar
        ex3:
        while True:  #loop infinito
            condiçao
            if condicao:
                break  #para o loop infinito e sai do while

[Variáveis Compostas]
    - Tuplas ()
        As tuplas são imutáveis, seus valores não podem ser mudados durante a execução, apenas na hora da criação da tupla
        A tupla pode ser apagada com o comando del

    - Listas []
        - criar listas
        lista = []
        lista = list()
        Armazenam vários valores como as tuplas, mas podem ser mudados durante a execução
        - adicionar elementos
            lista.append('valor')  # adiciona um valor no final da lista
            lista.insert(0, 'valor')  # adiciona um valor na posição 0 da lista
        - apagar elementos
            del lista[3]  # apaga o elemento na posição 3 da lista
            lanche.pop(3)  # também apaga o elemento na posição 3 da lista
            lanche.pop()  # metodo pop sem parametro por padrão elimina o último elemento da lista
            lanche.remove('valor')  # remove da lista especificamente o valor informado
        - alguns metodos de uma lista
            valores = list(range(4, 11))  # cria uma lista com o nome valores com os valores 4, 5, 6, 7, 8, 9, 10
            valores = [8, 2, 5, 4, 9, 3, 0]  # cria uma lista com os valores informados
            valores.sort()  # organiza os valores da lista, com base no exemplo acima a lista ficaria [0, 2, 3, 4, 5, 8, 9]
            valores.sort(reverse=True)  # organiza os valores da lista em ordem reversa se tornando [9, 8, 5, 4, 3, 2, 0]
            len(valores)  # número de elementos em uma lista
        - copiando uma lista
            lista = [1, 2, 3]
            lista_2 = lista  # será criada uma ligação entre as listas, ao alterar uma as duas serão alteradas
            lista_2 = lista[:] # melhor opção, será criada uma lista 2 com os valores da primeira lista

    - Listas Compostas [[]] # listas dentro de listas
        lista_1 = [1, 2, 3]
        lista_2.append(lista[:]) # serão adicionados todos  os valores da lista_1 ao primeiro valor da lista_2
        ex:
        pessoas = [['Pedro', 25], ['Maria', 19], ['João', 32]]
        print(pessoas[0][0]) # retorna o item 0 do primeiro valor de pessoas, no caso 'Pedro'
        print(pessoas[1][1]) # retorna o item 1 do segundo valor de pessoas, no caso 19
        print(pessoas[2][0]) # retorna o item 0 do terceiro valor de pessoas, no caso 'João'
        print(pessoas[1]) # retorna o 2 valor de pessoas, no caso ['Maria', 19]

    - Dicionários {}
        - criar dicionário
            dados = dict()
            dados = {'nome':'Pedro', 'idade':25}
            print(dados['nome'])    Pedro
            print(dados['idade'])   25
        - adicionar elementos
            dados['sexo'] = 'M'     {'nome':'Pedro', 'idade':25, 'sexo':'M'}
        - remover elementos
            del dados['idade']  # elimina o índice idade e o seu valor
        - alguns exemplos:
            filme = {'titulo':'Star Wars',
                     'ano':1977,
                     'diretor':'George Lucas'
                    }
            obs*: os dicionários são compostos por itens, chaves e valores:
                - itens são a junção de chave e valor, no exemplo acima o primeiro item é ('título':'Star Wars')
                - chaves são os índices, no exemplo acima a chave é título
                - valores são o que as chaves armazenam, no exemplo acima o valor da chave título é Star Wars
        -alguns métodos de um dicionário
            print(filme.values())  # retorna apenas os valores, no caso do exemplo de filme seriam, Star Wars, 1997 e George Lucas
            print(filme.keys())  # retorna apenas as chaves, no exemplo de filme seriam, título, ano e diretor
            print(filme.items())  # retorna os itens, no exemplo do filme seriam titulo:Star Wars, ano:1977 e diretor:George Lucas
            -ex:
                for k, v in filme.items():
                    print(f'O {k} é {v}')  # retorna a chave(k) e o valor(v), alterando conforme o loop
                        # retorno do for:
                        O título é Star Wars
                        O ano é 1977
                        O diretor é George Lucas
            filme.copy()  # copia o contéudo do dicionário
        * Dicionários, listas e tuplas podem se misturar, um dentro do outro
            ex:
            locadora = [{}, {}, {}]  # locadora é uma lista que contém 3 dicionários dentro
            locadora = [{'título':'Star Wars', 'ano':'1977', 'diretor':'George Lucas'},
                        {'título':'Avengers', 'ano':'2012', 'diretor':'Joss Whedon'},
                        {'título':'Matrix', 'ano':'1999', 'diretor':'Machowski'}
                       ]
            print(locadora[0]['ano']  # retorna o valor da chave ano do primeiro valor da lista locadora, nesse caso 1977
            print(locadora[2]['título']  # retorna o valor da chave título do terceiro valor da lista locadora, nesse caso Matrix

[Funções]
    - Definições
        Funções são rotinas
        ex: de funções que já vem no python: print(), len(), input(), int(), float()

    - Criando funções
        ex:
        print('----------------------------------')
        print('SISTEMA ALUNOS')
        print('----------------------------------')
        print('----------------------------------')
        print('CADASTRO DE FUNCIONÁRIO')
        print('----------------------------------')
        print('----------------------------------')
        print('ERRO DO SISTEMA')
        print('----------------------------------')
        # esse código podo ser substítuido por uma função
            def mensagem(msg):  # criando a função
                print('----------------------------------')
                print(msg)
                print('----------------------------------')

        mensagem('SITEMA DE ALUNOS')  # executando a função
        mensagem('CADASTRO DE FUNCIONÁRIO')
        mensagem('ERRO DO SISTEMA')

    - Empacotar parâmetros
        ex1:
            def contador(*núm):  # ao usar o * o python entende que vão ser inseridos vários valores
                tam = len(núm)
                print(f'Recebi os valores {núm} e são ao no total {tám} números)
            contador(2, 1, 7)  # Retorna: Recebi os valores (2, 1, 7) e são ao todos 3 números
            contador(8, 0)  # Retorna: Recebi os valores (8, 0) e são ao todos 2 números
            contador(4, 4, 7, 6, 2)  # Retorna: Recebi os valores (4, 4, 7, 6, 2) e são ao todos 5 números
        ex2:  # dobrar os valores de cada número em uma lista
            def dobra(lst):
                pos = 0
                while pos < len(lst):
                    lst[pos]*=2
                    pos+=1
            valores = [7, 2, 5, 0, 4]
            dobra(valores)
            print(valores) # Retorna: [14, 4, 10, 0, 8]

[Interactive Help]  # Ajuda interativa
    -help()
        entra no modo de ajuda, onde você pode inserir os comandos para ver o manual sobre eles
        >>> : modo padrão do console python
        help> : modo do console interativo
    -help(print)
        já retorna o manual da função especifica informada
    -print(input.__doc__)
        retorna informação sobre a função

[Docstring]  # string de documentação
    -ex:
        def contador(i, f, p):
            """
            -> Faz uma contagem e mostra na tela.
            :param i: inicio da contagem
            :param f: fim da contagem
            :param p: passo da contagem
            :return: sem retorno
            """
            c= i
            while c <= f:
                print(f'{c}', end='..')
                c += p
            print('FIM!')
        help(contador)  # Mostra a documentação entre as tres aspas

[Parâmetros opcionais]
    # Quando um valor é declarado para um dos parâmetros da função ele se torna opcional
    -ex:
        def somar(a=0, b=0, c=0):
            s= a + b + c
            print(f'A soma vale {s}')
        somar(3, 2, 5)
        somar(8, 4)  # como existe um valor opcional, o valor que não foi informado será pego do valor opcional c = 0

[Escopo de variáveis]
    # Variáveis globais funcionam em qualquer local do programa
    # Variáveis locais funcionam apenas dentro do escopo  do código em que ela é utilizada
    ex:
        def teste(b):
            a = 8
            b += 4
            c = 2
            print(f'A dentro vale {a}')  # Retornaria 8
            print(f'B dentro vale {b}')  # Retornaria 9
            print(f'C dentro vale {c}')  # Retornaira 2
        a = 5
        teste(a)
        print(f'A dentro vale {a}')  # Retornaria 5
        print(f'B dentro vale {b}')  # Retornaria erro pois a variável b não existe fora da função
        print(f'C dentro vale {c}')  # Retornaria erro pois a variável c não existe fora da função
            # no exemplo acima a variável 'a' é global, então seu valor vai ser 5 dentro ou fora da função
            # já as váriaveis b e c são locais, e elas só existem dentro da função teste
            # caso exista uma variável globlal e uma local com o mesmo nome, a local será uzada sem alterar a global
            # para que a variável global seja sempre usada é necessário usar a palavra reservada global
                ex:
                global a
                a = 5
                    # nesse caso, sempre que a for alterado, serão alteradas todas as variáveis com nome a

[Retorno de resultados]
    # Funções normalmente retornam valores, utilizando a palavra reservada return
    ex:
        def somar(a=0, b=0, c=0)
            s = a + b + c
            return s
        resp = somar(3, 2, 5)  # a variável resposta vai receber o valor direto da soma

